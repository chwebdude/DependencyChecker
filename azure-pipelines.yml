trigger:
- '*'

pool:
  name: Azure Pipelines
  vmImage: 'windows-latest'
  demands: npm


steps:

# Install tfx-cli
- task: ms-devlabs.vsts-developer-tools-build-tasks.tfx-installer-build-task.TfxInstaller@1
  displayName: "Use Node CLI for Azure DevOps (tfx-cli): v0.7.x"
  inputs:
    version: v0.7.x

# Query Dev extension version
- task: ms-devlabs.vsts-developer-tools-build-tasks.extension-version-build-task.ExtensionVersion@1
  displayName: 'Query Extension Version: dev'
  inputs:
    connectedServiceName: Marketplace
    publisherId: chwebdude
    extensionId: 'a46650ae-fa0a-458f-8ca1-7ae59c43838d '
    versionAction: Patch
    setBuildNumber: true
  condition: ne(variables['Build.SourceBranch'], 'refs/heads/master')

# Query extension version if master branch
- task: ms-devlabs.vsts-developer-tools-build-tasks.extension-version-build-task.ExtensionVersion@1
  displayName: 'Query Extension Version: master'
  inputs:
    connectedServiceName: Marketplace
    publisherId: chwebdude
    extensionId: 'dependency-checker'
    versionAction: Minor
    setBuildNumber: true
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')

# Versioning assemblies //Todo: Check if this is still okay for .Net Core
- task: bleddynrichards.Assembly-Info-Task.Assembly-Info-Task.Assembly-Info-NetFramework@2
  displayName: 'Set Assembly Manifest Data'
  inputs:
    VersionNumber: '$(Build.BuildNumber)'
    FileVersionNumber: '$(Build.BuildNumber)'
    InformationalVersion: '$(Build.BuildNumber)'

# Install Yarn
- task: geeklearningio.gl-vsts-tasks-yarn.yarn-installer-task.YarnInstaller@2
  displayName: 'Use Yarn 1.x'
  inputs:
    checkLatest: true

# Restore buildtask npm packages
- task: geeklearningio.gl-vsts-tasks-yarn.yarn-task.Yarn@2
  displayName: 'Yarn '
  inputs:
    ProjectDirectory: buildtask


# Compile typescript buildtask
- task: bool.compile-type-script.compile-type-script-task.compile-type-script@1
  displayName: 'Compile TypeScript'
  inputs:
    projectPath: buildtask

# Restore Buildtab npm packages
- task: geeklearningio.gl-vsts-tasks-yarn.yarn-task.Yarn@2
  displayName: 'Yarn  buildtab'
  inputs:
    ProjectDirectory: buildtab

# Compile Buildtab
- task: bool.compile-type-script.compile-type-script-task.compile-type-script@1
  displayName: 'Compile TypeScript buildtab'
  inputs:
    projectPath: buildtab

# Restore NuGet packages
- task: NuGetToolInstaller@1
  displayName: 'Install NuGet'

- task: NuGetCommand@2
  displayName: 'NuGet restore'
  inputs:
    restoreSolution: '$(Parameters.solution)'

# Build
- task: DotNetCoreCLI@2
  inputs:
    command: 'publish'
    publishWebProjects: false
    zipAfterPublish: false
    modifyOutputPath: false

# Execute Tests
- task: DotNetCoreCLI@2
  displayName: 'dotnet test'
  inputs:
    command: test


# Copy binaries into extension directory
- task: CopyFiles@2
  displayName: 'Copy Files to: $(System.DefaultWorkingDirectory)\buildtask\bin'
  inputs:
    SourceFolder: 'DependencyChecker\bin\Debug\netcoreapp3.0\publish'
    TargetFolder: '$(System.DefaultWorkingDirectory)\buildtask\bin'

# Publish Extension to market when master branch
- task: ms-devlabs.vsts-developer-tools-build-tasks.publish-extension-build-task.PublishExtension@1
  displayName: 'Publish Extension: Master'
  inputs:
    connectedServiceName: Marketplace
    extensionVersion: '$(Build.BuildNumber)'
    extensionVisibility: public
  condition: and(eq(variables['Build.SourceBranch'], 'refs/heads/master'), succeeded())

# Create a GitHub release on master branch
- task: GitHubRelease@0
  displayName: 'GitHub release (create)'
  inputs:
    gitHubConnection: GitHub
    repositoryName: chwebdude/DependencyChecker
    target: master
    tagSource: manual
    tag: '$(Build.BuildNumber)'
    releaseNotesSource: input
  condition: and(eq(variables['Build.SourceBranch'], 'refs/heads/master'), succeeded())

# Publish as internal preview extension
- task: ms-devlabs.vsts-developer-tools-build-tasks.publish-extension-build-task.PublishExtension@1
  displayName: 'Publish Extension: Dev'
  inputs:
    connectedServiceName: Marketplace
    extensionId: 'a46650ae-fa0a-458f-8ca1-7ae59c43838d '
    extensionName: 'dependency-checker-dev'
    extensionVersion: '$(Build.BuildNumber)'
    updateTasksId: true
    extensionVisibility: private
    shareWith: webdude
  continueOnError: true
  condition: and(ne(variables['Build.SourceBranch'], 'refs/heads/master'), succeeded())

# Publish state if anything failed
- task: PublishPipelineArtifact@0
  displayName: 'Publish Pipeline Artifact'
  inputs:
    targetPath: '$(Build.SourcesDirectory)'
  condition: failed()